#!/bin/sh

set -o errexit
trap '[ $? -eq 0 ] && exit 0 || echo "Error on line ${LINENO} of ${0}"; exit 1' EXIT

while ! pg_isready -h db -p 5432 -d postgres; do
	echo "waiting for db on postgresql://db:5432/postgres";
	sleep 3;
done

/admin -c /dbconf.yml -s /create_tables.sql -S /seeds.sql -p /patches.sql -m /migrations reset
/admin -c /dbconf.yml -s /create_tables.sql -S /seeds.sql -p /patches.sql -m /migrations upgrade
/admin -v -c /traffic.vault.dbconf.yml -s /traffic.vault.schema.psql -m /traffic.vault.migrations reset
/admin -v -c /traffic.vault.dbconf.yml -s /traffic.vault.schema.psql -m /traffic.vault.migrations upgrade

rm -rf /dbconf.yml /create_tables.sql /seeds.sql /patches.sql /migrations /admin /traffic.vault.dbconf.yml /traffic.vault.schema.psql /traffic.vault.migrations

cd /traffic_ops_golang

exit 0

dlv --accept-multiclient --continue --listen=:6444 --headless --api-version=2 debug -- --cfg=/cdn.json --dbcfg=/dbconf.yml


while inotifywait --exclude .swp -e modify -r . ;
do
    # find PID of the file generated by `go run .` to kill it. make sure the grep does not match other processes running on the system
    IDS=$(ps ax | grep "/tmp/go-build" | grep "b001/exe/main" | grep -v "grep" | awk '{print $1}')
    if [ ! -z "$IDS" ]
    then
        kill $IDS;
    fi
    go run . &
done;
