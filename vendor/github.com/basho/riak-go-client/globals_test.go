// Copyright 2015-present Basho Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package riak

import (
	"bytes"
	"encoding/json"
	"fmt"
	"net"
	"os"
	"strconv"
	"testing"
	"time"
)

var localhost = net.ParseIP("127.0.0.1")

var vclock = bytes.NewBufferString("vclock123456789")
var vclockBytes = vclock.Bytes()

var crdtContext = bytes.NewBufferString("crdt_context")
var crdtContextBytes = crdtContext.Bytes()

const testBucketType = "plain"
const testBucketName = "riak_index_tests"

// riak_admin bucket-type create counters '{"props":{"datatype":"counter"}}'
// riak-admin bucket-type activate counters
const testCounterBucketType = "counters"

// riak_admin bucket-type create sets '{"props":{"datatype":"set"}}'
// riak-admin bucket-type activate sets
const testSetBucketType = "sets"

// riak_admin bucket-type create gsets '{"props":{"datatype":"gset"}}'
// riak-admin bucket-type activate gsets
const testGSetBucketType = "gsets"

// riak_admin bucket-type create maps '{"props":{"datatype":"map"}}'
// riak-admin bucket-type activate maps
const testMapBucketType = "maps"

// riak_admin bucket-type create hlls '{"props":{"datatype":"hll"}}'
// riak-admin bucket-type activate hlls
const testHllBucketType = "hlls"

func getRiakPort() uint16 {
	riakPort := uint16(8087)
	if portEnvVar := os.Getenv("RIAK_PORT"); portEnvVar != "" {
		if portNum, err := strconv.Atoi(portEnvVar); err == nil {
			riakPort = uint16(portNum)
		}
	}
	return riakPort
}

func getRiakHost() string {
	riakHost := "localhost"
	if hostEnvVar := os.Getenv("RIAK_HOST"); hostEnvVar != "" {
		riakHost = hostEnvVar
	}
	return riakHost
}

func getRiakAddress() string {
	return fmt.Sprintf("%s:%d", getRiakHost(), getRiakPort())
}

func getBasicObject() *Object {
	return &Object{
		ContentType:     "text/plain",
		Charset:         "utf-8",
		ContentEncoding: "utf-8",
		Value:           []byte("this is a value in Riak"),
	}
}

func TestDeleteFromSliceWhileIterating(t *testing.T) {
	s := []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}
	if len(s) != 10 {
		t.Errorf("expected 10 elements, got %v", len(s))
	}
	for i := 0; i < len(s); {
		e := s[i]
		// t.Log(i, "Processing:", e)
		if e%2 == 0 {
			l := len(s) - 1
			s[i], s[l], s = s[l], 0, s[:l]
		} else {
			i++
		}
	}
	if len(s) != 5 {
		t.Errorf("expected 5 elements, got %v", len(s))
	}
}

func jsonDump(val interface{}) {
	EnableDebugLogging = true
	defer func() {
		EnableDebugLogging = false
	}()
	if val == nil {
		logDebug("[jsonDump]", "NIL VAL")
	} else {
		if json, err := json.MarshalIndent(val, "", "  "); err != nil {
			logDebug("[jsonDump]", "%s", err.Error())
		} else {
			logDebug("[jsonDump]", "%s", string(json))
		}
	}
}

func validateTimeout(t *testing.T, e time.Duration, a uint32) {
	actualDuration := time.Duration(a) * time.Millisecond
	if expected, actual := e, actualDuration; expected != actual {
		t.Errorf("expected %v, got %v", expected, actual)
	}
}

func sliceIncludes(slice [][]byte, term []byte) (rv bool) {
	rv = false
	for _, t := range slice {
		if bytes.Compare(t, term) == 0 {
			rv = true
			break
		}
	}
	return
}

var randomBytes = bytes.NewBufferString(random).Bytes()

var random = ""
