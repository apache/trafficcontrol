#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

- name: Create Cache Profiles - Per CDN and Hardware Profile
  uri:
    url: "{{ dl_to_url }}/api/{{ dl_to_api_version }}/profiles"
    method: POST
    body: "{{ lookup('template', 'profile.j2') }}"
  #with_items: "{{ dl_ds_merged_profile_cdntemplates }}"
  with_nested:
    - "{{ dl_ds_merged_profile_cdntemplates }}"
    - "{{ eligible_hardware_component_names }}"
  when: (item.0.type == 'ATS_PROFILE' or item.0.type == 'GROVE_PROFILE') and (item.0.name is regex(dl_ds_merged_profile_prefix_ansible_component_map[item.1]))
  vars:
    name: "{{ item.0.name }}_{{ Target_hardware_profile.key }}"
    description: "{{ item.0.description }} for hardware profile {{ Target_hardware_profile.key }}"
    cdn: "{{ Target_cdn_id }}"
    type: "{{ item.0.type }}"
    routingDisabled: "{{ (item.0.routingDisabled | default(false)) | lower }}"
    error_query: "alerts[?level=='error'].text[?!contains(@,'already exists')]"
    target_xmlId: "Invalid (only for rendering)"
    eligible_hardware_component_names: "{{ cache_hardware_profile_map | dict2items | json_query(eligible_hardware_component_names_query) | map('lower') | list | unique }}"
    eligible_hardware_component_names_query: "[?value.hardware_profile==`{{ Target_hardware_profile.key }}`].value.component"
  register: create_profiles_out
  failed_when: (create_profiles_out.status == 400 and create_profiles_out.json | to_json | from_json | json_query(error_query) | length != 0) or (create_profiles_out.status > 400 and create_profiles_out.status < 600)
  no_log: true
  retries: 10
  delay: 10

- name: Create and Associate Parameters to Cache Profiles - Per CDN and Hardware Profile
  uri:
    url: "{{ dl_to_url }}/api/{{ dl_to_api_version }}/profiles/name/{{ item.0.name }}_{{ Target_hardware_profile.key }}/parameters"
    method: POST
    body: "{{ lookup('template', 'parameter.j2') }}"
  when: (item.0.type == 'ATS_PROFILE' or item.0.type == 'GROVE_PROFILE') and (item.0.name is regex(dl_ds_merged_profile_prefix_ansible_component_map[item.1]))
  with_nested:
    - "{{ dl_ds_merged_profile_cdntemplates }}"
    - "{{ eligible_hardware_component_names }}"
  vars:
    paramset: "{{ item.0.parameters | default([]) }}"
    cdn_query: "response[?name == '{{ item.0.cdn | default('ALL') }}'].id | [0]"
    error_query: "alerts[?level=='error'].text[?!contains(@,'already exists')]"
    target_xmlId: "Invalid (only for rendering)"
    eligible_hardware_component_names: "{{ cache_hardware_profile_map | dict2items | json_query(eligible_hardware_component_names_query) | map('lower') | list | unique }}"
    eligible_hardware_component_names_query: "[?value.hardware_profile==`{{ Target_hardware_profile.key }}`].value.component"
    cache_drive_letter_regex: "^(?:{{ dl_ds_merged_cache_block_device_prefix_whitelist | join('|') }})(\\w+)$"
    Target_hardware_profile_cache_disk_letters: "{{ Target_hardware_profile.value.cache_disks | map('regex_replace',cache_drive_letter_regex,'\\1') | list | join(',') }}"
    cache_drive_letter_prefix_regex: "^({{ dl_ds_merged_cache_block_device_prefix_whitelist | join('|') }})(\\w+)$"
    Target_hardware_profile_cache_disk_prefix: "{{ Target_hardware_profile.value.cache_disks | map('regex_replace',cache_drive_letter_prefix_regex,'\\1') | list | first | default('INVALID_DRIVE_PREFIX') }}"
    ram_drive_letter_regex: "^(?:{{ dl_ds_merged_cache_ram_device_prefix_whitelist | join('|') }})(\\w+)$"
    Target_hardware_profile_ram_disk_letters: "{{ Target_hardware_profile.value.ram_disks | map('regex_replace',ram_drive_letter_regex,'\\1') | list | join(',') }}"
    ram_drive_letter_prefix_regex: "^({{ dl_ds_merged_cache_ram_device_prefix_whitelist | join('|') }})(\\w+)$"
    Target_hardware_profile_ram_disk_prefix: "{{ Target_hardware_profile.value.ram_disks | map('regex_replace',ram_drive_letter_prefix_regex,'\\1') | list | first | default('INVALID_RAM_DRIVE_PREFIX') }}"
  register: create_profiles_out
  failed_when: (create_profiles_out.status == 400 and create_profiles_out.json | to_json | from_json | json_query(error_query) | length != 0) or (create_profiles_out.status > 400 and create_profiles_out.status < 600)
  no_log: true
  retries: 10
  delay: 10
